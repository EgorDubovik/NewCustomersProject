services:
   mysql:
      image: mysql:latest
      container_name: mysql
      environment:
         MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
         MYSQL_DATABASE: ${MYSQL_DATABASE}
         MYSQL_USER: ${MYSQL_USER}
         MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      volumes:
         - ./mysql:/var/lib/mysql
      networks:
         - test-network

      ports:
         - '3306:3306'

   laravel:
      container_name: laravel
      image: bitnami/laravel:latest
      # build:
      #    context: .
      #    dockerfile: Dockerfile-laravel
      environment:
         - DB_CONNECTION=mysql
         - DB_HOST=mysql
         - DB_PORT=3306
         - DB_DATABASE=${MYSQL_DATABASE}
         - DB_USERNAME=${MYSQL_USER}
         - DB_PASSWORD=${MYSQL_PASSWORD}
         - QUEUE_CONNECTION=redis
         - REDIS_HOST=redis
         - REDIS_PORT=6379
         - REDIS_PASSWORD=${REDIS_PASSWORD}
      volumes:
         - ./backend:/app
      ports:
         - '8000:8000'
      command:
         # sh -c "composer install && php artisan migrate && php artisan serve --host=0.0.0.0 --port=8000 & php artisan queue:work redis"
         sh -c "php artisan serve --host=0.0.0.0 --port=8000 & php artisan queue:work redis"
      networks:
         - test-network
      depends_on:
         - redis
         - mysql
      restart: on-failure

   redis:
      image: redis:latest
      container_name: redis
      command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
      environment:
         - REDIS_PASSWORD=${REDIS_PASSWORD}
      ports:
         - '6379:6379'
      networks:
         - test-network
      restart: on-failure

   phpmyadmin:
      image: phpmyadmin/phpmyadmin
      container_name: phpmyadmin
      environment:
         PMA_HOST: mysql
         PMA_PORT: 3306
         MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      networks:
         - test-network
      ports:
         - '8080:80'
      depends_on:
         - mysql
   nodejs:
      container_name: nodejs
      build:
         context: ./nodejs
      # image: node:latest
      environment:
         - OPENAI_API_KEY=${OPENAI_API_KEY}
      volumes:
         - ./nodejs:/app
         - /app/node_modules
      working_dir: /app
      command: npm run dev
      ports:
         - '3000:3000'
      networks:
         - test-network

   nginx:
      image: nginx:latest
      container_name: nginx
      volumes:
         - ./nginx/${NGINX_CONFIG_FILE}:/etc/nginx/nginx.conf
         - ./frontend/dist:/var/www/html
         - ./certbot/conf:/etc/letsencrypt # config for certbot certificates
         - ./certbot/www:/var/www/certbot # for certbot challenge
      ports:
         - '80:80'
         - '443:443'
      deploy:
         replicas: ${NGINX_ENABLED:-1}
      depends_on:
         - phpmyadmin
         - laravel
      networks:
         - test-network
   certbot:
      image: certbot/certbot
      container_name: certbot
      volumes:
         - ./certbot/conf:/etc/letsencrypt
         - ./certbot/www:/var/www/certbot
      depends_on:
         - nginx
      networks:
         - test-network

networks:
   test-network:
      driver: bridge
